#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
	ncopy:	pushl %ebp	# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi	# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst
##################################################################
#								 #
# Leader name:  严秉昊						 #
# student ID: 518021910753					 #
#								 #
#########################################################################################################################################################
# 						                        #										#
# Used ways								# quality:									#
#	1. Add iaddl to the hcl, and exchange the instruction		#	1. Hardware: (pipe-full.hcl)						#
#	   about immediate numbers with iaddl. Directly decrease	#		Implement the iaddl instruction					#
#	   the number of instructions.					#		Average execute time: 16.44 ---> 13.96				#
#	2. Load-use hazard. Add Another mrmovl instruction during	#		Effect: little. For few immediate number instructions		#
#	   the stall. Avoid the hazard and get the the value will	#	2. Software: (ncopy.ys))						#
#	   be used in advance.						#		Loop unrolling.							#
#	3. Loop Unrolling. For there is a loop in the function, we 	#		Avoid load-use hazard.						#
#	   can usr loop unrolling to improve the efficiency. In this    #		Average execute time: 13.96 ---> 9.48				#
#	   function, we unroll by a factor of 4 for the limitation	#		Effect: a lot. The main function to increase the efficiency.	#
#	   of code size.						#										#
#									#										#
#########################################################################################################################################################
#									
ncopy:
	xorl 	%eax , %eax
	iaddl 	$-4 , %edx	#len = len -4
	andl	%edx ,  %edx	
	jl 	remian
Loop:	mrmovl 	(%ebx) , %esi	#loop unrolling
	mrmovl 	4(%ebx),%edi	#load-use hazard
	rmmovl 	%esi , (%ecx)
	andl 	%esi ,%esi
	jle	LNpos1
	iaddl	$1 , %eax
LNpos1: rmmovl 	%edi , 4(%ecx)
	andl 	%edi , %edi
	jle  	LNpos2
	iaddl	$1, %eax
LNpos2: mrmovl 	8(%ebx) , %esi
	mrmovl 	12(%ebx),%edi	#load-use hazard
	rmmovl 	%esi ,8 (%ecx)
	andl 	%esi ,%esi
	jle	LNpos3
	iaddl	$1 , %eax
LNpos3: rmmovl 	%edi , 12(%ecx)
	andl 	%edi , %edi
	jle 	nextLoop
	iaddl	$1, %eax
nextLoop:
	iaddl	$16,%ebx
	iaddl	$16,%ecx
	iaddl	$-4,%edx
	jge	Loop            

remian:	 iaddl 	$4 , %edx	# Restore the true len
	iaddl	$-1, %edx
	jl	Done
	mrmovl	(%ebx) , %esi
	mrmovl	4(%ebx),%edi
	rmmovl	%esi , (%ecx)
	andl 	%esi ,%esi
	jle	rNpos
	iaddl	$1 , %eax
rNpos:	
	iaddl 	$-1, %edx
	jl 	Done
	rmmovl	%edi , 4(%ecx)
	andl 	%edi , %edi
	jle 	rNpos1
	iaddl	$1, %eax
rNpos1:
	iaddl 	$-1 , %edx	
	jl	Done
	mrmovl 8(%ebx) , %esi
	rmmovl %esi , 8(%ecx)
	andl 	%esi ,%esi
	jle	Done
	iaddl	$1 , %eax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
popl %edi               # Restore callee-save registers
popl %ebx
popl %esi
rrmovl %ebp, %esp
popl %ebp
ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
